// Generated by gencpp from file tactile_servo_srvs/begin_controlRequest.msg
// DO NOT EDIT!


#ifndef TACTILE_SERVO_SRVS_MESSAGE_BEGIN_CONTROLREQUEST_H
#define TACTILE_SERVO_SRVS_MESSAGE_BEGIN_CONTROLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tactile_servo_srvs
{
template <class ContainerAllocator>
struct begin_controlRequest_
{
  typedef begin_controlRequest_<ContainerAllocator> Type;

  begin_controlRequest_()
    : begin_control(0)  {
    }
  begin_controlRequest_(const ContainerAllocator& _alloc)
    : begin_control(0)  {
  (void)_alloc;
    }



   typedef int64_t _begin_control_type;
  _begin_control_type begin_control;




  typedef boost::shared_ptr< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct begin_controlRequest_

typedef ::tactile_servo_srvs::begin_controlRequest_<std::allocator<void> > begin_controlRequest;

typedef boost::shared_ptr< ::tactile_servo_srvs::begin_controlRequest > begin_controlRequestPtr;
typedef boost::shared_ptr< ::tactile_servo_srvs::begin_controlRequest const> begin_controlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tactile_servo_srvs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c92b9ccb7f477a560d2f95b4cc11d5d8";
  }

  static const char* value(const ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc92b9ccb7f477a56ULL;
  static const uint64_t static_value2 = 0x0d2f95b4cc11d5d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tactile_servo_srvs/begin_controlRequest";
  }

  static const char* value(const ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 begin_control\n\
\n\
";
  }

  static const char* value(const ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.begin_control);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct begin_controlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tactile_servo_srvs::begin_controlRequest_<ContainerAllocator>& v)
  {
    s << indent << "begin_control: ";
    Printer<int64_t>::stream(s, indent + "  ", v.begin_control);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TACTILE_SERVO_SRVS_MESSAGE_BEGIN_CONTROLREQUEST_H
