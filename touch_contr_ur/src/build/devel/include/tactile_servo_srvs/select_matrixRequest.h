// Generated by gencpp from file tactile_servo_srvs/select_matrixRequest.msg
// DO NOT EDIT!


#ifndef TACTILE_SERVO_SRVS_MESSAGE_SELECT_MATRIXREQUEST_H
#define TACTILE_SERVO_SRVS_MESSAGE_SELECT_MATRIXREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tactile_servo_srvs
{
template <class ContainerAllocator>
struct select_matrixRequest_
{
  typedef select_matrixRequest_<ContainerAllocator> Type;

  select_matrixRequest_()
    : copx(0)
    , copy(0)
    , force(0)
    , cocx(0)
    , cocy(0)
    , orient(0)  {
    }
  select_matrixRequest_(const ContainerAllocator& _alloc)
    : copx(0)
    , copy(0)
    , force(0)
    , cocx(0)
    , cocy(0)
    , orient(0)  {
  (void)_alloc;
    }



   typedef int64_t _copx_type;
  _copx_type copx;

   typedef int64_t _copy_type;
  _copy_type copy;

   typedef int64_t _force_type;
  _force_type force;

   typedef int64_t _cocx_type;
  _cocx_type cocx;

   typedef int64_t _cocy_type;
  _cocy_type cocy;

   typedef int64_t _orient_type;
  _orient_type orient;




  typedef boost::shared_ptr< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> const> ConstPtr;

}; // struct select_matrixRequest_

typedef ::tactile_servo_srvs::select_matrixRequest_<std::allocator<void> > select_matrixRequest;

typedef boost::shared_ptr< ::tactile_servo_srvs::select_matrixRequest > select_matrixRequestPtr;
typedef boost::shared_ptr< ::tactile_servo_srvs::select_matrixRequest const> select_matrixRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tactile_servo_srvs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82ccbe8ea8a90c6e89f74c41c4d77e19";
  }

  static const char* value(const ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82ccbe8ea8a90c6eULL;
  static const uint64_t static_value2 = 0x89f74c41c4d77e19ULL;
};

template<class ContainerAllocator>
struct DataType< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tactile_servo_srvs/select_matrixRequest";
  }

  static const char* value(const ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 copx\n\
int64 copy\n\
int64 force\n\
int64 cocx\n\
int64 cocy\n\
int64 orient\n\
";
  }

  static const char* value(const ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.copx);
      stream.next(m.copy);
      stream.next(m.force);
      stream.next(m.cocx);
      stream.next(m.cocy);
      stream.next(m.orient);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct select_matrixRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tactile_servo_srvs::select_matrixRequest_<ContainerAllocator>& v)
  {
    s << indent << "copx: ";
    Printer<int64_t>::stream(s, indent + "  ", v.copx);
    s << indent << "copy: ";
    Printer<int64_t>::stream(s, indent + "  ", v.copy);
    s << indent << "force: ";
    Printer<int64_t>::stream(s, indent + "  ", v.force);
    s << indent << "cocx: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cocx);
    s << indent << "cocy: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cocy);
    s << indent << "orient: ";
    Printer<int64_t>::stream(s, indent + "  ", v.orient);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TACTILE_SERVO_SRVS_MESSAGE_SELECT_MATRIXREQUEST_H
